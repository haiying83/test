C语言学习

参考书单：http://book.douban.com/doulist/636329/
《The C Programming Language》http://book.douban.com/subject/1230004/

《C程序设计语言（第2版·新版）》http://book.douban.com/subject/1139336/

个人建议可以看看Lua、Sqlite、Nginx这些项目的代码，代码量不多，而且代码质量也都比较高。
另外可以看看Linux内核代码，坊间有不少书籍可以帮助解读。关于如何很好的阅读代码，
大家可以参考《Code Reading》这本书。

还可以到http://stackoverflow.com 参与回答问题，浏览其他人的问题解答来汲取知识，
比如这篇http://stackoverflow.com/questions/2054939/char-is-signed-or-unsigned-by-default 
就介绍了一个C语言关于char类型的小陷阱。

当C语言学习的差不多时候，还可以学习一门动态语言，比如Lua或者Python，
试着在实际工作项目中混合使用动态语言与C语言

程序员往往是懒惰的，“拿来主义”、“拷贝主义”很流行也很有效，当对某个函数或者关键字不是很理解的时候，
看看别人是怎么使用的，会非常有启发性。这里介绍几个常用的代码搜索网站，最常用的是google的
codesearch：http://codesearch.google.com ，可以通过不同条件及正则表达式搜索特定关键词。
另外可以参考维基百科上一个“带有C语言示例的文章”分类，里面代码写的也很不错。还可以在github.com上搜索相关项目。
在前面博客文章我还介绍了一个名为罗塞塔代码的网站http://rosettacode.org/ 
这个网站上可以找到不同程序语言针对某个问题的解决方案，用于学习比较非常便利。

可以找到大量C语言编程相关资料的地方是“美味书签”，通过搜索特定关键字 （C + programming）就可以找到很多值得挖掘的资源
http://delicious.com/search?p=c+programming。
还可以参考dmoz.org的C语言分类http://www.dmoz.org/Computers/Programming/Languages/C/ 相比美味书签时效性能差点，
但是分类比较系统，查找也要容易一些。


《C陷阱与缺陷》http://book.douban.com/subject/2778632/

《C专家编程》http://book.douban.com/subject/2377310/

《C语言参考手册》http://book.douban.com/subject/2132084/：这是最后一本强烈推荐你最好买回家作为案头书必备的参考书。
前面几本书或者稍显简略，或者专注某个特定专题，都不适合遇到问题时翻查。这本《C语言参考手册》可以看作是C语言编程的
《新华字典》，全面而权威。里面还涵盖了C99的内容，紧跟时代潮流。

下面几本书都可以作为交叉参考，也都很有价值，也是建议大家都买下来，好书如朋友，日久弥新，像是我推荐的这几本书在
douban或者amazon上评分都非常高，而且反复再版。

《C和指针》http://book.douban.com/subject/1229973/：指针的重要性如何，学过C语言（或者C++）的朋友都知道，
这本书更是把指针拔高到了与C语言平起平坐的地位，其实也是从头开始介绍，作为教学参考书也是可以的。

《C标准库》http://book.douban.com/subject/3775842/：这本书是专门介绍C语言的标准库如何实现的，比如malloc算法，
用标准的C语言该如何写？strlen这个函数应该如何实现？尽管书中不少代码与真实的C标准库相差很多（由于标准库需要考虑性能优化，
很多函数有一些特定的trick），但是绝对值得参考。

《你必须知道的495个C语言问题》 http://book.douban.com/subject/3422332/：这本书其实就是C-FAQ的印刷版本，C-FAQ在各种编程
语言的FAQ中可以称得上质量一流。如果你想应聘或者招聘C语言相关程序员，这本书一定要参考。

《Linux C编程一站式学习》http://book.douban.com/subject/4141733/：这本书是基于特定操作系统Linux来介绍C语言编程，可作
为计算机相关专业的教科书或入门参考书，也是书单里面唯一一本国人原创的编程书籍，非常难得。
书中几乎所有内容都在网上直接公开，针对读者的意见进行修改，这也是非常难得的一种开放态度。非常推荐大家买一本。

学习C语言，一定不能只读书，应该动手练习完成书里面的项目需求（比如编写一个目录浏览器）以及每章的练习题目。
这就需要有可以实验的环境，下面针对不同操作系统简单做一下介绍。



